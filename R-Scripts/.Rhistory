# plot(temp$m.time, temp$n.az, type='l')
par(mfrow=c(3,2), mar=c(3,2,2,2))
# Plot everything about z
z <- readSensors('08.18.57.08');
sdx <- processEvents(z, sdparam=5)
par(mfrow=c(3,2), mar=c(3,2,2,2))
plot(z$m.time, z$m.ox, type='l')
plot(z$m.time, z$n.ax, type='l')
plot(z$m.time, z$n.az, type='l')
plot(z$m.time, z$m.oz, type='l')
plot(z$m.time, sdx, type='l')
sdx <- processEvents(z, sdparam=15)
par(mfrow=c(3,2), mar=c(3,2,2,2))
plot(z$m.time, z$m.ox, type='l')
plot(z$m.time, z$n.ax, type='l')
plot(z$m.time, z$n.az, type='l')
plot(z$m.time, z$m.oz, type='l')
plot(z$m.time, sdx, type='l')
# Plot everything about z
z <- readSensors('08.18.57.08');
sdx <- processEvents(z, sdparam=15)
par(mfrow=c(3,2), mar=c(3,2,2,2))
plot(z$m.time, z$m.ox, type='l')
plot(z$m.time, z$n.ax, type='l')
plot(z$m.time, z$n.az, type='l')
plot(z$m.time, z$m.oz, type='l')
plot(z$m.time, sdx, type='l')
#x <- readSensors('08.18.06.45');
#y <- readSensors('08.18.23.06');
#temp <- readSensors('10.08.11.17')
#plot(x$m.time, type='l')
# plot(temp$m.time, temp$m.ox, type='l')
# Following are the main results of the analysis of accelerometer and orientation sensors:
# * Orientation along 'x' provides the direction of the car along the road
# * Orientation along 'y' provides the lateral variation of the car along the road (ideally NIL)
# * Orientation along 'z' provides the altitude variation of the car along the road
# * Acceleration along 'x' provides the acceleration/deceleration of the car along the road
# * Acceleration along 'y' provides the lateral acceleration/deceleration of the car (ideally NIL)
# * Acceleration along 'z' provides the vertical motion of the car (clear indicates road unevenness)
processEvents <- function (x, sdparam=10, midval=median(x$n.az), midvalUse=TRUE) {
# If direction (filtered to remove noise) stays same and the acceleration along z-axis has a large
# disturbance and acceleration along x-axis has decreased and then slowly increased, this indicates
# a possible bad-road condition. We create a vector of this event
# Filter the direction data
# Find standard deviation along z-axis
sdx <- vector(mode="numeric", length=length(x$m.time))
if(midvalUse == TRUE) {
for(i in 1:length(sdx)) {
if(i < sdparam)
sdx[i] <- mad(x$n.az[1:i],center=midval)
else
sdx[i] <- mad(x$n.az[(i-sdparam+1):i], center=midval)
}
}
else
{
for(i in 1:length(sdx)) {
if(i < sdparam)
sdx[i] <- mad(x$n.az[1:i])
else
sdx[i] <- mad(x$n.az[(i-sdparam+1):i])
}
}
return (sdx)
# Compute velocity along x-axis
# Create a bump-vector based on the above data
}
sdx <- processEvents(z, sdparam=15, midvalUse=FALSE)
par(mfrow=c(3,2), mar=c(3,2,2,2))
plot(z$m.time, z$m.ox, type='l')
plot(z$m.time, z$n.ax, type='l')
plot(z$m.time, z$n.az, type='l')
plot(z$m.time, z$m.oz, type='l')
plot(z$m.time, sdx, type='l')
sdx <- processEvents(z, sdparam=100, midvalUse=FALSE)
par(mfrow=c(3,2), mar=c(3,2,2,2))
plot(z$m.time, z$m.ox, type='l')
plot(z$m.time, z$n.ax, type='l')
plot(z$m.time, z$n.az, type='l')
plot(z$m.time, z$m.oz, type='l')
plot(z$m.time, sdx, type='l')
sdx <- processEvents(z, sdparam=50, midvalUse=FALSE)
par(mfrow=c(3,2), mar=c(3,2,2,2))
plot(z$m.time, z$m.ox, type='l')
plot(z$m.time, z$n.ax, type='l')
plot(z$m.time, z$n.az, type='l')
plot(z$m.time, z$m.oz, type='l')
plot(z$m.time, sdx, type='l')
readSensors <- function(timeStamp) {
ts = toString(timeStamp)
orinames <- c('j1', 'time', 'j2', 'ox', 'oy', 'oz')
accnames <- c('j1', 'time', 'j2', 'ax', 'ay', 'az')
eventnames <- c('idx', 'time')
ori <- read.table(paste(ts, "ORIENTATION.txt", sep="_"), col.names = orinames, sep="")
acc <- read.table(paste(ts, "ACCELEROMETER.txt", sep="_"), col.names = accnames, sep="")
evt <- read.table(paste(ts, "KeyEvent.txt", sep="_"), col.names = eventnames, sep="")
m <- ori[(abs(ori$time-acc$time)<10),]
n <- acc[(abs(ori$time-acc$time)<10),]
x <- data.frame(I(m$time),m$ox,m$oy,m$oz,n$ax,n$ay,n$az)
# Finally, make the obtained data equally spaced in time
diffx <- vector(mode="numeric", length=length(x$m.time))
for(i in 2:length(diffx)) {
diffx[i] <- x$m.time[i] - x$m.time[i-1]
}
diffx[1] = diffx[2]
modX <- x[diffx<=mean(diffx), ]
return(modX);
}
# Following are the main results of the analysis of accelerometer and orientation sensors:
# * Orientation along 'x' provides the direction of the car along the road
# * Orientation along 'y' provides the lateral variation of the car along the road (ideally NIL)
# * Orientation along 'z' provides the altitude variation of the car along the road
# * Acceleration along 'x' provides the acceleration/deceleration of the car along the road
# * Acceleration along 'y' provides the lateral acceleration/deceleration of the car (ideally NIL)
# * Acceleration along 'z' provides the vertical motion of the car (clear indicates road unevenness)
processEvents <- function (x, madparam=10, midval=median(x$n.az), midvalUse=TRUE) {
# If direction (filtered to remove noise) stays same and the acceleration along z-axis has a large
# disturbance and acceleration along x-axis has decreased and then slowly increased, this indicates
# a possible bad-road condition. We create a vector of this event
# Filter the direction data
# Find standard deviation along z-axis
mdx <- vector(mode="numeric", length=length(x$m.time))
if(midvalUse == TRUE) {
for(i in 1:length(mdx)) {
if(i < madparam)
mdx[i] <- mad(x$n.az[1:i],center=midval)
else
mdx[i] <- mad(x$n.az[(i-madparam+1):i], center=midval)
}
}
else
{
for(i in 1:length(mdx)) {
if(i < madparam)
mdx[i] <- mad(x$n.az[1:i])
else
mdx[i] <- mad(x$n.az[(i-madparam+1):i])
}
}
return (mdx)
# Compute velocity along x-axis
# Create a bump-vector based on the above data
}
# Plot everything about z
z <- readSensors('08.18.06.45');
#z <- readSensors('08.18.23.06');
#z <- readSensors('08.18.57.08');
mdx <- processEvents(z, madparam=50, midvalUse=FALSE)
par(mfrow=c(3,2), mar=c(3,2,2,2))
plot(z$m.time, z$m.ox, type='l')
plot(z$m.time, z$n.ax, type='l')
plot(z$m.time, z$n.az, type='l')
plot(z$m.time, z$m.oz, type='l')
plot(z$m.time, mdx, type='l')
#plot(x$m.time, type='l')
mdx <- processEvents(z, madparam=50, midvalUse=TRUE)
par(mfrow=c(3,2), mar=c(3,2,2,2))
plot(z$m.time, z$m.ox, type='l')
plot(z$m.time, z$n.ax, type='l')
plot(z$m.time, z$n.az, type='l')
plot(z$m.time, z$m.oz, type='l')
plot(z$m.time, mdx, type='l')
#plot(x$m.time, type='l')
mdx <- processEvents(z, madparam=20, midvalUse=TRUE)
par(mfrow=c(3,2), mar=c(3,2,2,2))
plot(z$m.time, z$m.ox, type='l')
plot(z$m.time, z$n.ax, type='l')
plot(z$m.time, z$n.az, type='l')
plot(z$m.time, z$m.oz, type='l')
plot(z$m.time, mdx, type='l')
#plot(x$m.time, type='l')
par(mfrow=c(3,2), mar=c(3,2,2,2))
plot(z$m.time, z$m.ox, type='l', main="ox")
plot(z$m.time, z$n.ax, type='l')
plot(z$m.time, z$n.az, type='l')
plot(z$m.time, z$m.oz, type='l')
plot(z$m.time, mdx, type='l')
par(mfrow=c(3,2), mar=c(3,2,2,2))
plot(z$m.time, z$m.ox, type='l', main="ox")
plot(z$m.time, z$n.ax, type='l', main="ax")
plot(z$m.time, z$n.az, type='l', main="az")
plot(z$m.time, z$m.oz, type='l', main="oz")
plot(z$m.time, mdx, type='l', main="mdx")
mad_msdx = sd(mdx)
# Following are the main results of the analysis of accelerometer and orientation sensors:
# * Orientation along 'x' provides the direction of the car along the road
# * Orientation along 'y' provides the lateral variation of the car along the road (ideally NIL)
# * Orientation along 'z' provides the altitude variation of the car along the road
# * Acceleration along 'x' provides the acceleration/deceleration of the car along the road
# * Acceleration along 'y' provides the lateral acceleration/deceleration of the car (ideally NIL)
# * Acceleration along 'z' provides the vertical motion of the car (clear indicates road unevenness)
processEvents <- function (x, madparam=10, midval=median(x$n.az), midvalUse=TRUE) {
# If direction (filtered to remove noise) stays same and the acceleration along z-axis has a large
# disturbance and acceleration along x-axis has decreased and then slowly increased, this indicates
# a possible bad-road condition. We create a vector of this event
# Filter the direction data
# Find standard deviation of acceleration along z-axis
mdx <- vector(mode="numeric", length=length(x$m.time))
if(midvalUse == TRUE) {
for(i in 1:length(mdx)) {
if(i < madparam)
mdx[i] <- mad(x$n.az[1:i],center=midval)
else
mdx[i] <- mad(x$n.az[(i-madparam+1):i], center=midval)
}
}
else
{
for(i in 1:length(mdx)) {
if(i < madparam)
mdx[i] <- mad(x$n.az[1:i])
else
mdx[i] <- mad(x$n.az[(i-madparam+1):i])
}
}
# Compute velocity along x-axis
# Create a bump-vector based on the above data
bvec = vector(mode="logical", length=length(mdx))
mad_mdx = mad(mdx)
for(i in 2:length(mdx)) {
if(abs(mdx[i]-mdx[i-1]) > mad_mdx) {
bvec[i] = TRUE
}
}
bvec[1] = FALSE
# Return final vector
return bval
}
# Following are the main results of the analysis of accelerometer and orientation sensors:
# * Orientation along 'x' provides the direction of the car along the road
# * Orientation along 'y' provides the lateral variation of the car along the road (ideally NIL)
# * Orientation along 'z' provides the altitude variation of the car along the road
# * Acceleration along 'x' provides the acceleration/deceleration of the car along the road
# * Acceleration along 'y' provides the lateral acceleration/deceleration of the car (ideally NIL)
# * Acceleration along 'z' provides the vertical motion of the car (clear indicates road unevenness)
processEvents <- function (x, madparam=10, midval=median(x$n.az), midvalUse=TRUE) {
# If direction (filtered to remove noise) stays same and the acceleration along z-axis has a large
# disturbance and acceleration along x-axis has decreased and then slowly increased, this indicates
# a possible bad-road condition. We create a vector of this event
# Filter the direction data
# Find standard deviation of acceleration along z-axis
mdx <- vector(mode="numeric", length=length(x$m.time))
if(midvalUse == TRUE) {
for(i in 1:length(mdx)) {
if(i < madparam)
mdx[i] <- mad(x$n.az[1:i],center=midval)
else
mdx[i] <- mad(x$n.az[(i-madparam+1):i], center=midval)
}
}
else
{
for(i in 1:length(mdx)) {
if(i < madparam)
mdx[i] <- mad(x$n.az[1:i])
else
mdx[i] <- mad(x$n.az[(i-madparam+1):i])
}
}
# Compute velocity along x-axis
# Create a bump-vector based on the above data
bvec = vector(mode="logical", length=length(mdx))
mad_mdx = mad(mdx)
for(i in 2:length(mdx)) {
if(abs(mdx[i]-mdx[i-1]) > mad_mdx) {
bvec[i] = TRUE
}
}
bvec[1] = FALSE
# Return final vector
return bvec
}
# Following are the main results of the analysis of accelerometer and orientation sensors:
# * Orientation along 'x' provides the direction of the car along the road
# * Orientation along 'y' provides the lateral variation of the car along the road (ideally NIL)
# * Orientation along 'z' provides the altitude variation of the car along the road
# * Acceleration along 'x' provides the acceleration/deceleration of the car along the road
# * Acceleration along 'y' provides the lateral acceleration/deceleration of the car (ideally NIL)
# * Acceleration along 'z' provides the vertical motion of the car (clear indicates road unevenness)
processEvents <- function (x, madparam=10, midval=median(x$n.az), midvalUse=TRUE) {
# If direction (filtered to remove noise) stays same and the acceleration along z-axis has a large
# disturbance and acceleration along x-axis has decreased and then slowly increased, this indicates
# a possible bad-road condition. We create a vector of this event
# Filter the direction data
# Find standard deviation of acceleration along z-axis
mdx <- vector(mode="numeric", length=length(x$m.time))
if(midvalUse == TRUE) {
for(i in 1:length(mdx)) {
if(i < madparam)
mdx[i] <- mad(x$n.az[1:i],center=midval)
else
mdx[i] <- mad(x$n.az[(i-madparam+1):i], center=midval)
}
}
else
{
for(i in 1:length(mdx)) {
if(i < madparam)
mdx[i] <- mad(x$n.az[1:i])
else
mdx[i] <- mad(x$n.az[(i-madparam+1):i])
}
}
# Compute velocity along x-axis
# Create a bump-vector based on the above data
bvec = vector(mode="logical", length=length(mdx))
mad_mdx = mad(mdx)
for(i in 2:length(mdx)) {
if(abs(mdx[i]-mdx[i-1]) > mad_mdx) {
bvec[i] = TRUE
}
}
bvec[1] = FALSE
# Return final vector
return (bvec)
}
readSensors <- function(timeStamp) {
ts = toString(timeStamp)
orinames <- c('j1', 'time', 'j2', 'ox', 'oy', 'oz')
accnames <- c('j1', 'time', 'j2', 'ax', 'ay', 'az')
eventnames <- c('idx', 'time')
ori <- read.table(paste(ts, "ORIENTATION.txt", sep="_"), col.names = orinames, sep="")
acc <- read.table(paste(ts, "ACCELEROMETER.txt", sep="_"), col.names = accnames, sep="")
evt <- read.table(paste(ts, "KeyEvent.txt", sep="_"), col.names = eventnames, sep="")
m <- ori[(abs(ori$time-acc$time)<10),]
n <- acc[(abs(ori$time-acc$time)<10),]
x <- data.frame(I(m$time),m$ox,m$oy,m$oz,n$ax,n$ay,n$az)
# Finally, make the obtained data equally spaced in time
diffx <- vector(mode="numeric", length=length(x$m.time))
for(i in 2:length(diffx)) {
diffx[i] <- x$m.time[i] - x$m.time[i-1]
}
diffx[1] = diffx[2]
modX <- x[diffx<=mean(diffx), ]
return(modX);
}
# Following are the main results of the analysis of accelerometer and orientation sensors:
# * Orientation along 'x' provides the direction of the car along the road
# * Orientation along 'y' provides the lateral variation of the car along the road (ideally NIL)
# * Orientation along 'z' provides the altitude variation of the car along the road
# * Acceleration along 'x' provides the acceleration/deceleration of the car along the road
# * Acceleration along 'y' provides the lateral acceleration/deceleration of the car (ideally NIL)
# * Acceleration along 'z' provides the vertical motion of the car (clear indicates road unevenness)
processEvents <- function (x, madparam=10, midval=median(x$n.az), midvalUse=TRUE) {
# If direction (filtered to remove noise) stays same and the acceleration along z-axis has a large
# disturbance and acceleration along x-axis has decreased and then slowly increased, this indicates
# a possible bad-road condition. We create a vector of this event
# Filter the direction data
# Find standard deviation of acceleration along z-axis
mdx <- vector(mode="numeric", length=length(x$m.time))
if(midvalUse == TRUE) {
for(i in 1:length(mdx)) {
if(i < madparam)
mdx[i] <- mad(x$n.az[1:i],center=midval)
else
mdx[i] <- mad(x$n.az[(i-madparam+1):i], center=midval)
}
}
else
{
for(i in 1:length(mdx)) {
if(i < madparam)
mdx[i] <- mad(x$n.az[1:i])
else
mdx[i] <- mad(x$n.az[(i-madparam+1):i])
}
}
# Compute velocity along x-axis
# Create a bump-vector based on the above data
bvec = vector(mode="logical", length=length(mdx))
mad_mdx = mad(mdx)
for(i in 2:length(mdx)) {
if(abs(mdx[i]-mdx[i-1]) > mad_mdx) {
bvec[i] = TRUE
}
}
bvec[1] = FALSE
# Return final vector
return (bvec)
}
# Plot everything about z
z <- readSensors('08.18.06.45');
#z <- readSensors('08.18.23.06');
#z <- readSensors('08.18.57.08');
bumps <- processEvents(z, madparam=20, midvalUse=TRUE)
par(mfrow=c(3,2), mar=c(3,2,2,2))
plot(z$m.time, z$m.ox, type='l', main="ox")
plot(z$m.time, z$n.ax, type='l', main="ax")
plot(z$m.time, z$n.az, type='l', main="az")
plot(z$m.time, z$m.oz, type='l', main="oz")
plot(z$m.time, bumps, type='l', main="bumps")
#plot(x$m.time, type='l', main="time")
# Following are the main results of the analysis of accelerometer and orientation sensors:
# * Orientation along 'x' provides the direction of the car along the road
# * Orientation along 'y' provides the lateral variation of the car along the road (ideally NIL)
# * Orientation along 'z' provides the altitude variation of the car along the road
# * Acceleration along 'x' provides the acceleration/deceleration of the car along the road
# * Acceleration along 'y' provides the lateral acceleration/deceleration of the car (ideally NIL)
# * Acceleration along 'z' provides the vertical motion of the car (clear indicates road unevenness)
processEvents <- function (x, madparam=10, midval=median(x$n.az), midvalUse=TRUE) {
# If direction (filtered to remove noise) stays same and the acceleration along z-axis has a large
# disturbance and acceleration along x-axis has decreased and then slowly increased, this indicates
# a possible bad-road condition. We create a vector of this event
# Filter the direction data
# Find standard deviation of acceleration along z-axis
mdx <- vector(mode="numeric", length=length(x$m.time))
if(midvalUse == TRUE) {
for(i in 1:length(mdx)) {
if(i < madparam)
mdx[i] <- mad(x$n.az[1:i],center=midval)
else
mdx[i] <- mad(x$n.az[(i-madparam+1):i], center=midval)
}
}
else
{
for(i in 1:length(mdx)) {
if(i < madparam)
mdx[i] <- mad(x$n.az[1:i])
else
mdx[i] <- mad(x$n.az[(i-madparam+1):i])
}
}
# Compute velocity along x-axis
# Create a bump-vector based on the above data
bvec = vector(mode="logical", length=length(mdx))
mad_mdx = sd(mdx)
for(i in 2:length(mdx)) {
if(abs(mdx[i]-mdx[i-1]) > mad_mdx) {
bvec[i] = TRUE
}
}
bvec[1] = FALSE
# Return final vector
return (bvec)
}
bumps <- processEvents(z, madparam=20, midvalUse=TRUE)
par(mfrow=c(3,2), mar=c(3,2,2,2))
plot(z$m.time, z$m.ox, type='l', main="ox")
plot(z$m.time, z$n.ax, type='l', main="ax")
plot(z$m.time, z$n.az, type='l', main="az")
plot(z$m.time, z$m.oz, type='l', main="oz")
plot(z$m.time, bumps, type='l', main="bumps")
# Following are the main results of the analysis of accelerometer and orientation sensors:
# * Orientation along 'x' provides the direction of the car along the road
# * Orientation along 'y' provides the lateral variation of the car along the road (ideally NIL)
# * Orientation along 'z' provides the altitude variation of the car along the road
# * Acceleration along 'x' provides the acceleration/deceleration of the car along the road
# * Acceleration along 'y' provides the lateral acceleration/deceleration of the car (ideally NIL)
# * Acceleration along 'z' provides the vertical motion of the car (clear indicates road unevenness)
processEvents <- function (x, madparam=10, midval=median(x$n.az), midvalUse=TRUE) {
# If direction (filtered to remove noise) stays same and the acceleration along z-axis has a large
# disturbance and acceleration along x-axis has decreased and then slowly increased, this indicates
# a possible bad-road condition. We create a vector of this event
# Filter the direction data
# Find standard deviation of acceleration along z-axis
mdx <- vector(mode="numeric", length=length(x$m.time))
if(midvalUse == TRUE) {
for(i in 1:length(mdx)) {
if(i < madparam)
mdx[i] <- mad(x$n.az[1:i],center=midval)
else
mdx[i] <- mad(x$n.az[(i-madparam+1):i], center=midval)
}
}
else
{
for(i in 1:length(mdx)) {
if(i < madparam)
mdx[i] <- mad(x$n.az[1:i])
else
mdx[i] <- mad(x$n.az[(i-madparam+1):i])
}
}
# Compute velocity along x-axis
# Create a bump-vector based on the above data
bvec = vector(mode="logical", length=length(mdx))
mad_mdx = mad(mdx)
for(i in 2:length(mdx)) {
if(abs(mdx[i]-mdx[i-1]) > mad_mdx) {
bvec[i] = TRUE
}
}
bvec[1] = FALSE
# Return final vector
return (bvec)
}
bumps <- processEvents(z, madparam=20, midvalUse=TRUE)
par(mfrow=c(3,2), mar=c(3,2,2,2))
plot(z$m.time, z$m.ox, type='l', main="ox")
plot(z$m.time, z$n.ax, type='l', main="ax")
plot(z$m.time, z$n.az, type='l', main="az")
plot(z$m.time, z$m.oz, type='l', main="oz")
plot(z$m.time, bumps, type='l', main="bumps")
# Plot everything about z
#z <- readSensors('08.18.06.45');
#z <- readSensors('08.18.23.06');
z <- readSensors('08.18.57.08');
bumps <- processEvents(z, madparam=20, midvalUse=TRUE)
par(mfrow=c(3,2), mar=c(3,2,2,2))
plot(z$m.time, z$m.ox, type='l', main="ox")
plot(z$m.time, z$n.ax, type='l', main="ax")
plot(z$m.time, z$n.az, type='l', main="az")
plot(z$m.time, z$m.oz, type='l', main="oz")
plot(z$m.time, bumps, type='l', main="bumps")
#plot(x$m.time, type='l', main="time")
par(mfrow=c(3,2), mar=c(3,2,2,2))
plot(z$m.time, z$m.ox, type='l', main="orientation along X")
plot(z$m.time, z$n.ax, type='l', main="acceleration along X")
plot(z$m.time, z$n.az, type='l', main="acceleration along Z")
plot(z$m.time, z$m.oz, type='l', main="orientation along Z")
plot(z$m.time, bumps, type='l', main="Probable Bumps")
